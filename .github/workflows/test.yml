name: Build , Test, Push to ECR, and Deplot to EC2
on:                                           
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Compose
        run: sudo apt-get update && sudo apt-get install -y docker-compose

      - name: Set up environment variables
        run: echo "MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }}" >> $GITHUB_ENV
        
      - name: Build and start the services
        run: docker-compose up -d --build
        env:
          MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}

      - name: Test app
        run: |
          sleep 10
          curl -f http://localhost:8080 || exit 1

      - name: Test backend (Flask) internally
        run: |
          BACKEND_CONTAINER=$(docker-compose ps -q backend)  # Get the container ID of the backend service
          docker exec $BACKEND_CONTAINER curl -f http://localhost:5000/api/data || exit 1

      - name: Test MySQL container
        run: |
          MYSQL_CONTAINER=$(docker-compose ps -q mysql_container)  # Get the container ID of the MySQL service
          docker exec $MYSQL_CONTAINER mysql -u root -p${{ secrets.MYSQL_ROOT_PASSWORD }} -e "SHOW DATABASES;" || exit 1
          


      - name: Destroy the environment
        run: docker-compose down -v

  push_to_ecr:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Log in to AWS ECR
        run: |
          aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: us-east-1
      
      - name: Build the backend Docker image
        run: |
          docker build -t backend ./backend
          docker tag backend:latest ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/3-service/backend:latest

      - name: Push the backend image to ECR
        run: |
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/3-service/backend:latest

      #- name: Filter and keep the latest two images
      #  run: |
      #    # Get the list of image digests
      #    IMAGE_DIGESTS=$(aws ecr list-images --repository-name 3-service/backend --query 'imageDetails | sort_by(@, &imagePushedAt) | reverse(@) | [].imageDigest' --output text)
    #
      #    # Convert the digests into an array
      #    DIGEST_ARRAY=($IMAGE_DIGESTS)
    #
      #    # Get the number of digests
      #    DIGEST_COUNT=${#DIGEST_ARRAY[@]}
    #
      #    # If there are more than 2 images, delete the older ones
      #    if [ $DIGEST_COUNT -gt 2 ]; then
      #      # Get the list of digests to delete (everything except the latest two)
      #      DIGESTS_TO_DELETE="${DIGEST_ARRAY[@]:2}"
      #
      #      # Delete the older images
      #      for DIGEST in $DIGESTS_TO_DELETE; do
      #        echo "Deleting image with digest: $DIGEST"
      #        aws ecr batch-delete-image --repository-name 3-service/backend --image-ids imageDigest=$DIGEST
      #      done
      #    else
      #      echo "No images to delete, keeping all images."
      #    fi
      #  env:
      #    AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #    AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      #    AWS_REGION: us-east-1

  deploy_to_ec2:
    runs-on: ubuntu-latest
    needs: push_to_ecr
    steps:
      - name: Set up SSH key 
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/ec2-key.pem
          chmod 600 ~/.ssh/ec2-key.pem
          ssh-keyscan -t rsa ${{ secrets.EC2_IP }} >> ~/.ssh/known_hosts
        env:
          EC2_SSH_KEY: ${{ secrets.EC2_SSH_KEY }}
          EC2_IP: ${{ secrets.EC2_IP }}

      - name: SSH into EC2 and deploy app
        run: |
          ssh -i ~/.ssh/ec2-key.pem -o StrictHostKeyChecking=no ec2-user@${{ secrets.EC2_IP }} << 'EOF'
          # Install docker-compose
          sudo yum update -y
          sudo amazon-linux-extras install docker -y
          sudo systemctl start docker
          sudo usermod -aG docker ec2-user
          sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version

          cd /home/ec2-user
          sudo yum install git -y 
          git clone https://github.com/${{ github.repository }}.git

          export AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
          export AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
          export AWS_DEFAULT_REGION=us-east-1

          aws ecr get-login-password --region us-east-1 | sudo docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com

          echo "export MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }}" >> ~/.bashrc
          echo "export ACCOUNT_ID=${{ secrets.AWS_ACCOUNT_ID }}" >> ~/.bashrc
          source ~/.bashrc
          cd ~/3-service-compose/
          docker-compose -f docker-compose-deploy.yml up -d

          EOF
        env:
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
          EC2_IP: ${{ secrets.EC2_IP }}
        


      
#  deploy:
#    runs-on: ubuntu-latest

#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v2

#      - name: Set up AWS CLI
#        uses: aws-actions/configure-aws-credentials@v1
#        with:
#          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#          aws-region: us-west-2

#      - name: Fetch DB password from AWS Secrets Manager
#        run: |
#          export DB_PASSWORD=$(aws secretsmanager get-secret-value --secret-id db_password --query SecretString --output text)
#          echo "$DB_PASSWORD" | docker secret create db_password -
        
#      - name: Deploy containers with Docker Compose
#        run: docker-compose -f docker-compose.prod.yml up -d

# ========= OR ==========
#  deploy:
#    runs-on: ubuntu-latest

#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v2

#      - name: Set up Docker
#        uses: docker/setup-buildx-action@v2

#      - name: Set up Docker Secrets from GitHub Secrets
#        run: |
#          echo "$DB_PASSWORD" | docker secret create db_password -
#        env:
#          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}  # Inject the GitHub secret as an env var

#      - name: Deploy containers with Docker Compose
#        run: docker-compose -f docker-compose.prod.yml up -d


      


